diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index 77925ea..055df07 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -18,43 +18,36 @@ import java.util.Set;
 
 public class Board {
 
-	private int ROWS;
-	private int COLS;
-
-	int rowCount = 0;
-
-
+	private int ROWS,COLS;
 	private String layoutConfigFile, setupConfigFile;
 	private Map<Character,Room> roomMap;
+	private BoardCell[][] grid;
+	private Set<BoardCell> targets;
+	private Set<BoardCell> visited;
 
 
-
-	/*
-	 * variable and methods used for SINGLETON pattern
-	 */
+	// Singleton Pattern
 	private static Board theInstance = new Board();
 
-	private BoardCell[][] grid;
-	private Set<BoardCell> targets;
-	private Set<BoardCell> visited;
 
 	// constructor is private to ensure only one can be created
 	private Board() {
 		super() ;
 	}
+
 	// this method returns the only Board
 	public static Board getInstance() {
 		return theInstance;
 	}
-	/*
-	 * initialize the board (since we are using singleton pattern)
-	 */
+
+	//initialize the board (since we are using singleton pattern)
 	public void initialize(){
 		//reset memory
-		
 		ROWS = 0;
 		COLS = 0;
-		
+		targets = new HashSet<>();
+		visited = new HashSet<>();
+
 		//Insert try catch to handle setup and badConfig exceptions
 		try {
 			//setConfigFiles("ClueLayout.csv","ClueSetup.txt"); may not need this
@@ -66,18 +59,10 @@ public class Board {
 			System.out.println("Error: Config files not found");
 		}
 
-		//previously in constructor
-		//grid = new BoardCell[ROWS][COLS];
+
 		targets = new HashSet<>();
 		visited = new HashSet<>();
-		/*
-		// Fill the board with TestBoardCell instances
-		for (int row = 0; row < ROWS; row++) {
-			for (int col = 0; col < COLS; col++) {
-				grid[row][col] = new BoardCell(row, col);
-			}
-		}
-		 */
+
 		// Calculate adjacency lists for each cell
 		calcAdjacencies();
 
@@ -93,34 +78,31 @@ public class Board {
 	//Load setup.txt file and insert value/key in hash map for future access
 	public void loadSetupConfig() throws BadConfigFormatException, FileNotFoundException{
 		roomMap = new HashMap<>(); //contains rooms
-		
-		Scanner scanner = new Scanner(new File(setupConfigFile));
+
 
 		//Fill hashMap
-		while(scanner.hasNextLine()) {
-			String line = scanner.nextLine();
 
-			if(!line.isEmpty()) {
-				char firstChar = line.charAt(0); //don't read comment lines
-				if(firstChar != '/') {
-					String[] values = line.split(", "); // separate room/space names and character
+		try (Scanner scanner = new Scanner(new File(setupConfigFile))) {
+			while (scanner.hasNextLine()) {
+				String line = scanner.nextLine().trim();
+				if (line.isEmpty() || line.startsWith("/")) continue; // Skip empty and comment lines
 
-					if(values[0].equals("Room") || values[0].equals("Space")) { //only input rooms
+				String[] values = line.split(", "); // separate room/space names and character
 
-						String roomCharStr = values[2]; // convert room character to char
-						char roomChar = roomCharStr.charAt(0);
+				if(values[0].equals("Room") || values[0].equals("Space")) { //only input rooms
 
-						String roomNameStr = values[1];
-						Room room = new Room(roomNameStr); // create room object
+					String roomCharStr = values[2]; // convert room character to char
+					char roomChar = roomCharStr.charAt(0);
 
-						roomMap.put(roomChar, room);
-					}else { 
-						throw new BadConfigFormatException("Error: Setup txt file not configured correctly");
-					}
+					String roomNameStr = values[1];
+					Room room = new Room(roomNameStr); // create room object
+
+					roomMap.put(roomChar, room);
+				}else { 
+					throw new BadConfigFormatException("Error: Setup txt file not configured correctly");
 				}
 			}
 		}
-
 	}
 
 	//Load layout.csv file and read through it ensuring it is not corrupted
@@ -146,7 +128,7 @@ public class Board {
 
 			ROWS++;
 		}
-		
+
 		//initialize grid 
 		grid = new BoardCell[ROWS][COLS];
 
@@ -156,39 +138,42 @@ public class Board {
 				grid[row][col] = new BoardCell(row, col);
 			}
 		}
-
 		//check if character is in setup config and populate board cells with info
-
+		processCell(tempList,ROWS,COLS);
+		
+	}
+	
+	//check if character is in setup config and populate board cells with info
+	private void processCell(ArrayList<String[]>tempList, int ROWS, int COLS) throws BadConfigFormatException {
 		for (int row = 0; row < ROWS; row++) {
 			for (int col = 0; col < COLS; col++) {
 				char firstChar = tempList.get(row)[col].charAt(0); //get just the first Character not * or #
 
 				if(roomMap.containsKey(firstChar)) {
 					//Populate boardCells with info
-
 					grid[row][col].setInitial(firstChar); //set the initial of the cell
-					grid[row][col].setRoom(roomMap.get(firstChar)); 
-					grid[row][col].isRoom();
-					
+					grid[row][col].setRoom(roomMap.get(firstChar)); //link to room object
+					grid[row][col].isRoom(); //returns true because it is a room cell
+
 					if(tempList.get(row)[col].length() > 1) { //check if cell has other characters
 						char scndChar = tempList.get(row)[col].charAt(1); //get the second Character( * or # or letters)
-						
+
 						if(scndChar == '*') {
 							grid[row][col].setRoomCenter();
 							Room room = roomMap.get(firstChar);
 							room.setCenterCell(grid[row][col]);
-							
+
 						}else if(scndChar == '#') {
 							grid[row][col].setLabel();
 							Room room = roomMap.get(firstChar);
 							room.setLabelCell(grid[row][col]);
-							
+
 						}else if(scndChar == '<' ||scndChar == '>' || scndChar == 'v'|| scndChar == '^') {
 							grid[row][col].setDoorDirection(scndChar);
-							
+
 						}else if(roomMap.containsKey(scndChar)) {
 							grid[row][col].setSecretPassage(scndChar);
-							
+
 						}else {
 							throw new BadConfigFormatException("Error: Second character in cell unknown");
 						}
@@ -198,17 +183,8 @@ public class Board {
 				}
 			}
 		}
-
-
-	}
-
-	// Returns the cell at the specified row and column
-	public BoardCell getCell(int row, int column) {
-		return grid[row][column];
 	}
-
 	//Calculates adjacency lists for all cells on the board
-
 	private void calcAdjacencies() {
 		for (int row = 0; row < ROWS; row++) {
 			for (int col = 0; col < COLS; col++) {
@@ -222,26 +198,26 @@ public class Board {
 			}
 		}
 	}
+	
+	// Returns the cell at the specified row and column
+		public BoardCell getCell(int row, int column) {
+			return grid[row][column];
+		}
 
-
+	//getRoom can either take a boardCell or character as a parameter
 	public Room getRoom(BoardCell cell) {
 		char key = cell.getInitial();
 		return roomMap.get(key);
-
 	}
+	
 	public Room getRoom(char value) {
-
 		return roomMap.get(value);
-
 	}
 
-
 	public int getNumRows() {
-		// TODO Auto-generated method stub
 		return ROWS;
 	}
 	public int getNumColumns() {
-		// TODO Auto-generated method stub
 		return COLS;
 	}
 }
diff --git a/src/clueGame/BoardCell.java b/src/clueGame/BoardCell.java
index 25380e9..7183867 100644
--- a/src/clueGame/BoardCell.java
+++ b/src/clueGame/BoardCell.java
@@ -99,22 +99,17 @@ public class BoardCell {
 	}
 
 	public boolean isRoomCenter() {
-		// TODO Auto-generated method stub
 		return isCenter;
 	}
 	public boolean setRoomCenter() {
-		// TODO Auto-generated method stub
 		return isCenter = true;
 	}
 
 	public void setSecretPassage(char value) {
-		// TODO Auto-generated method stub
 		this.secretPassage = value;
-		
 	}
 
 	public char getSecretPassage() {
-		// TODO Auto-generated method stub
 		return secretPassage;
 	}
 
